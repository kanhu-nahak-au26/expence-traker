{"ast":null,"code":"var _jsxFileName = \"/Users/inovotek/programming/youtube/youtube-tutorials-projects/expense-tracker /client/src/components/Loading.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { css } from \"@emotion/react\";\nimport ClipLoader from \"react-spinners/ClipLoader\"; // Can be a string as well. Need to ensure each key-value pair ends with ;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction LoadingComponent() {\n  _s();\n\n  let [loading, setLoading] = useState(true);\n  let [color, setColor] = useState(\"#ffffff\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"100vh\",\n      backgroundColor: \"black\"\n    },\n    children: /*#__PURE__*/_jsxDEV(ClipLoader, {\n      color: color,\n      loading: loading,\n      css: override,\n      size: 150\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoadingComponent, \"seaEM2XOjsxyl7PK3XOA1GtO+dM=\");\n\n_c = LoadingComponent;\nexport default LoadingComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadingComponent\");","map":{"version":3,"sources":["/Users/inovotek/programming/youtube/youtube-tutorials-projects/expense-tracker /client/src/components/Loading.js"],"names":["useState","css","ClipLoader","override","LoadingComponent","loading","setLoading","color","setColor","display","justifyContent","alignItems","height","backgroundColor"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,UAAP,MAAuB,2BAAvB,C,CAEA;;;AACA,MAAMC,QAAQ,GAAGF,GAAI;AACrB;AACA;AACA;AACA,CAJA;;AAMA,SAASG,gBAAT,GAA4B;AAAA;;AAC1B,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAApC;AACA,MAAI,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,SAAD,CAAhC;AAEA,sBACE;AACE,IAAA,KAAK,EAAE;AACLS,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,cAAc,EAAE,QAFX;AAGLC,MAAAA,UAAU,EAAE,QAHP;AAILC,MAAAA,MAAM,EAAE,OAJH;AAKLC,MAAAA,eAAe,EAAE;AALZ,KADT;AAAA,2BASE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEN,KAAnB;AAA0B,MAAA,OAAO,EAAEF,OAAnC;AAA4C,MAAA,GAAG,EAAEF,QAAjD;AAA2D,MAAA,IAAI,EAAE;AAAjE;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAjBQC,gB;;KAAAA,gB;AAmBT,eAAeA,gBAAf","sourcesContent":["import { useState } from \"react\";\nimport { css } from \"@emotion/react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\n// Can be a string as well. Need to ensure each key-value pair ends with ;\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction LoadingComponent() {\n  let [loading, setLoading] = useState(true);\n  let [color, setColor] = useState(\"#ffffff\");\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n        backgroundColor: \"black\",\n      }}\n    >\n      <ClipLoader color={color} loading={loading} css={override} size={150} />\n    </div>\n  );\n}\n\nexport default LoadingComponent;\n"]},"metadata":{},"sourceType":"module"}